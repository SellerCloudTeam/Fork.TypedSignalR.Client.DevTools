using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using TypedSignalR.Client.CodeAnalysis;

namespace TypedSignalR.Client.DevTools.Templates;

public sealed class SpecificationTemplate : ITextTemplate
{
    private readonly IReadOnlyList<SignalRServiceTypeMetadata> _services;

    public SpecificationTemplate(IReadOnlyList<SignalRServiceTypeMetadata> services)
    {
        _services = services;
    }

    public string TransformText()
    {
        var sb = new StringBuilder();

        sb.Append('[');

        if (_services.Count > 0)
        {
            _services[0].SerializeToJson(sb);

            for (int i = 1; i < _services.Count; i++)
            {
                sb.Append(',');
                _services[i].SerializeToJson(sb);
            }
        }

        sb.Append(']');

        var json = sb.ToString();

        Debug.WriteLine(json);

        var bytes = Encoding.UTF8.GetBytes(json);
        var str = string.Join(",", bytes);

        return $@"// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client.DevTools
// </auto-generated>
using System;

namespace TypedSignalR.Client.DevTools;

internal static partial class EndpointRouteBuilderExtensions
{{
    private static partial ReadOnlySpan<byte> GetSpecJsonBytes() => new byte[] {{ {str} }};
}}";
    }
}
